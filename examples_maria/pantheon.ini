; The emcee sampler, which uses the Goodman & Weare algorithm
sampler = emcee
root = ${PWD}

[emcee]
; The emcee sampler uses the concept of walkers, a collection
; of live points.  Sampling is done along lines that connect
; pairs of walkers.  The number of walkers must be at least
; 2*nparam + 1, but in general more than that usually works
; better.
walkers = 32
; This many samples is overkill, just to make the plots
; look a lot nicer
samples = 300
; This is the interval at which convergence diagnostics
; are performed
nsteps = 10





[output]
filename = output/pantheon_class.txt
format = text
verbosity = debug

[pipeline]
; We use two likelihoods, the JLA (for high redshift) and
; Riess 2011 to anchor H0, which is otherwise degenerate
; with the nuisance parameter M
modules = consistency class pantheon riess21
values = examples/pantheon_values.ini
extra_output =
quiet=T
debug=F
timing=F


; To use the maxlike sampler instead you can 
; set sampler=maxlike at the top
[maxlike]
; The values file we use in this example was
; created just like the one we made in demo4,
; by setting sampler = maxlike above, so that
; these settings were used:
output_ini = output/pantheon_maxlike.ini
; A covariance can only be output by some 
; optimization methods (those that find an approximation to it numerically)
output_covmat = new.cov
tolerance = 1e-6

; The BFGS method seems to find it a bit harder to actually locate
; the peak, but once it's there it provides you with covariance
; matrix estimate
;method = Nelder-Mead
;method = BFGS

; Any minimizer available in scipy can be specified here - they are:
; Nelder-Mead
; Powell
; CG
; BFGS
; Newton-CG
; L-BFGS-B
; TNC
; COBYLA
; SLSQP
; dogleg
; trust-ncg

[metropolis]
cobaya = T
samples = 50000
tuning_frequency = 500
tuning_grace = 1000
tuning_end = 10000
nsteps = 1000

[class]
file = boltzmann/class/class_interface.py
version = 3.2.0
lmax = 2850
debug = T
zmax = 4.0
cmb = T
mpk = T
lensing = T
#class_non_linear = halofit

[camb]
; For background-only data we do not need a full
; Boltzmann evaluation, just D(z), etc.
; Setting mode=background means we get this.
file = boltzmann/camb/camb_interface.py
mode = background
feedback = 0

; We need quite fine redshift spacing, because the supernovae
; go down to low z where things are pretty sensitive
nz_background = 200
zmin_background = 0.0
zmax_background = 2.0

[pantheon]
file = likelihood/pantheon/pantheon.py

; The Riess 11 likelihood anchors H0 for us
[riess21]
file = likelihood/riess21/riess21.py

; The consistency module translates between our chosen parameterization
; and any other that modules in the pipeline may want (e.g. camb)
[consistency]
file = utility/consistency/consistency_interface.py
