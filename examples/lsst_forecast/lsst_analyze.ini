;***********************************
;multinest is the default sampler
;***********************************
[runtime]
sampler = test
verbosity = standard

[test]
save_dir=output/lsst_forecast

[star]
nsample_dimension=5

[grid]
nsample_dimension=20

[fisher]
step_size = 0.02

[output]
filename=outputs/lsst_forecast.txt
format=text

[pipeline]
timing=F
debug=T
modules = consistency camb  extrapolate load_nz photoz_bias_source photoz_bias_lens unbiased_galaxies nonlinear_linear_alignment  pk_to_cl galaxy_bias shear_calibration add_intrinsic 2pt_like 
values = examples/lsst_forecast/lsst_values.ini
likelihoods = lsst

[2pt_like]
file = likelihood/2pt/2pt_like.py
data_file=examples/lsst_forecast/lsst_simulation.fits
covmat_name=COVMAT
like_name=lsst
data_sets=shear_cl  galaxy_cl galaxy_shear_cl

[load_nz]
file = number_density/load_nz_fits/load_nz_fits.py
nz_file = examples/lsst_forecast/lsst_simulation.fits
data_sets=source lens
prefix_section=T
prefix_extension=T

[photoz_bias_source]
file = number_density/photoz_bias/photoz_bias.py
mode = additive
sample = nz_source
bias_section = photoz_source_errors

[photoz_bias_lens]
file = number_density/photoz_bias/photoz_bias.py
mode = additive
sample = nz_lens
bias_section = photoz_lens_errors


[unbiased_galaxies]
file = bias/no_bias/no_bias.py

[shear_calibration]
file = shear/shear_bias/shear_m_bias.py
verbose = F


# The remainder of the pipeline is identical to the one used in the lsst_simulate.ini
# file adjacent to this one.
# We could put this text in a file lsst_common.ini and use the command:
# %include lsst_common.ini but I didn't want to be confusing

[nonlinear_linear_alignment]
file = intrinsic_alignments/la_model/linear_alignments_interface.py
method = bk_corrected
do_galaxy_intrinsic = T

[add_intrinsic]
file=shear/add_intrinsic/add_intrinsic.py
shear-shear=T
position-shear=T


[consistency]
file = utility/consistency/consistency_interface.py

[camb]
file = boltzmann/camb/camb_interface.py
mode=all
lmax=2500
feedback=0

[extrapolate]
file = boltzmann/extrapolate/extrapolate_power.py 
kmax = 500.

[galaxy_bias]
file = bias/binwise_bias/bin_bias.py


; This module uses the Limber approximation to compute shear-shear C_ell
; given the shear kernel (which is derived from the number density and 
; from geometry)

[pk_to_cl]
file = structure/projection/project_2d.py
ell_min_logspaced = 20.0
ell_max_logspaced = 2627.21847662
n_ell_logspaced = 15
shear-shear = source-source
position-shear = lens-source
position-position=lens-lens
shear-intrinsic = source-source
intrinsic-intrinsic = source-source
position-intrinsic = lens-source
verbose = F
