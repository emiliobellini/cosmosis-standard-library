; Demonstrate the different angular two-point functions in the standard library
[runtime]
sampler = test

[test]
save_dir=output/various-spectra
fatal_errors=T

[pipeline]
modules = consistency dndz luminosity_slope camb  clerkin_bias angular_power 2pt_shear 2pt_matter 2pt_ggl 2pt_mag 2pt_map 2pt_nap 2pt_map_nap
values = examples/various-spectra-values.ini
; Not used here, becuase we are not sampling
likelihoods =
extra_output =
quiet=F
debug=T
timing=F

; The consistency module translates between our chosen parameterization
; and any other that modules in the pipeline may want (e.g. camb)
[consistency]
file = ./utility/consistency/consistency_interface.py

[camb]
file = ./boltzmann/camb/camb_interface.py
mode=all
lmax=2500
nz_background = 301
zmax_background = 3.1
feedback=3
halofit_version = takahashi

; new simple module for using sigma8 as an input instead of A_s
; the only parameter required is the file location
[sigma8_rescale]
file = ./utility/sample_sigma8/sigma8_rescale.py

; Works the same as halofit but uses the Takahashi non-linear correction
[halofit_takahashi]
file = ./boltzmann/halofit_takahashi/halofit_interface.so

; use a Smail distribution for the underlying z values
[dndz]
file = ./number_density/smail/photometric_smail.py
nbin = 3
zmax = 2.0
dz = 0.01
z_edges = 0.2  0.4  0.6  1.0
output_section = nz_sample


; The magnification spectrum is sensitive to the slope of the luminosity number
; count function.  This module uses a fitting function for the slope alpha.
[luminosity_slope]
file = ./luminosity_function/Joachimi_Bridle_alpha/interface.py
magnitude_limit = 24.0
binned_alpha = T
sample = nz_sample
output_section = mag_alpha_sample

; Our bias model reqires the growth factor D(z).
; This module calculates that.
[growth]
file = ./structure/growth_factor/interface.so
zmin = 0.0
zmax = 3.0
dz = 0.01

; The Clerkin et al (2015) bias model.
; The default model, "GTD" is the "Generalized Time-Dependent" model.
; This requires three parameters which are given in the values file.
[clerkin_bias]
file= ./bias/clerkin/clerkin_interface.py

; You could replace clerkin_bias with this constant bias module and 
; uncomment the constant bias value in the values file if think you know bias
; perfectly. 
[constant_bias]
file = ./bias/constant_bias/constant_bias.py



[angular_power]
file = ./structure/projection/project_2d.py
ell_min_logspaced = 10.0
ell_max_logspaced = 100000.0
n_ell_logspaced = 100
shear-shear = sample-sample
position-position = sample-sample
magnification-magnification = sample-sample
position-shear = sample-sample
verbose = T

;other spectra you could switch on, though many of these will need additional
;input P(k) values to be calculated first.
; shear-Intrinsic = T
; intrinsic-Intrinsic = T
; magnification-Position = T
; position-Intrinsic = T
; magnification-Intrinsic = T
; magnification-Shear = T
; shear-Cmbkappa = T
; cmbkappa-Cmbkappa = T
; intrinsic-Cmbkappa = T
; position-Cmbkappa = T

; This module converts angular spectra from c_ell to correlation functions w(theta).
; It is slow and can be a little dodgy at small theta, so if you have a better
; version it would be great if you be happy to add it (or have us add it) to cosmosis
[2pt_shear]
file = ./shear/cl_to_xi_nicaea/nicaea_interface.so
; theta_min = 1.0
; theta_max = 50.0
; n_theta = 50
input_section_name = shear_cl
output_section_name = shear_xi
; Type of Hankel transform and output correlation function
; [0 = shear, 1 = matter, 2 = ggl]
corr_type = 0

[2pt_matter]
file = ./shear/cl_to_xi_nicaea/nicaea_interface.so
; theta_min = 1.0
; theta_max = 50.0
; n_theta = 50
input_section_name = galaxy_cl
output_section_name = galaxy_xi
; Type of Hankel transform and output correlation function
; [0 = shear, 1 = matter, 2 = ggl]
corr_type = 1

[2pt_ggl]
file = ./shear/cl_to_xi_nicaea/nicaea_interface.so
; theta_min = 1.0
; theta_max = 50.0
; n_theta = 50
input_section_name = galaxy_shear_cl
output_section_name = galaxy_shear_xi
; Type of Hankel transform and output correlation function
; [0 = shear, 1 = matter, 2 = ggl]
corr_type = 2

[2pt_mag]
file = ./shear/cl_to_xi_nicaea/nicaea_interface.so
; theta_min = 1.0
; theta_max = 50.0
; n_theta = 50
input_section_name = magnification_cl
output_section_name = magnification_xi
; Type of Hankel transform and output correlation function
; [0 = shear, 1 = matter, 2 = ggl]
corr_type = 1


[2pt_map]
file = ./shear/cl_to_xi_nicaea/nicaea_interface.so
input_section_name = shear_cl
output_section_name = shear_map
filter_type = 1
corr_type = 0

[2pt_map_nap]
file = ./shear/cl_to_xi_nicaea/nicaea_interface.so
input_section_name = galaxy_shear_cl
output_section_name = galaxy_shear_map_nap
filter_type = 1
corr_type = 2

[2pt_nap]
file = ./shear/cl_to_xi_nicaea/nicaea_interface.so
input_section_name = galaxy_cl
output_section_name = galaxy_nap
filter_type = 1
corr_type = 1

